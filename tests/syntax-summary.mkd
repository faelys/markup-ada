Block-level elements
====================

Block-level elements are generally separated by one or more blank lines.
Unmarked blocks are treated as paragraphs.

> Block quotes are marked by greater-than signs (`>`)
> like e-mail quotes.

Lists are a sequence of items preceeded by a marker. For bulleted lists,
allowed markers are:

- dash (`-`),
+ plus (`+`),
* star (`*`).

For numbered lists, any numbers followed by a dot (`.`) and a space:

1. first item,
1. second item,
42. third item.

Also both kind of lists can contain span-level items, like lists above,
or block-level items, like this :

* First block.

* Second block.

* Last block.

3. The same things for numbered lists.

2. The same things for numbered lists.

Lists can also be nested:

* Item 1
    + Item 1.1
    + Item 1.2
* Item 2
    1. Item 2.1
    2. Item 2.2

Code blocks are unmarked indented blocks, however some blocks consider
indentation as succession (e.g. list items).

    So this
	is a
    code block.

<div>
  <p>Raw HTML blocks are also available. No markdown interpretation is
performed here.</p>
</div>

<!-- HTML comments are also considered as blocks. -->

Horizontal rules is a line containing at least three dashes (`-`),
stars (`*`) or underscores (`_`) without any other non-blank character.

 - - -

They can also be entered as a single raw HTML tag:

<hr>

<hr
class="special-horiz-rule"
/>

Since horizontal rules also use list markers, as a special rule a valid
horizontal rule syntax is not considered as a list item:

 - first block

 - second (and last) block

 - - -

## Atx-style level-two header

Starting with hash sybmols (`#`).

Setext-style level-two header
-----------------------------

Underlined with dashes (`-`) or equal signs (`=`) for first level.

# Span-level elements

Code spans are marked by any symmetric number of consecutive backticks
(`` ` ``) and space-trimmed. This allows nesting backticks inside code spans
without escaping (e.g. ``` `` ` `` ```).

Simple *emphasis* is marked by stars (`*`) or underscores (`_`), with the
caveat an opening marker cannot be followed by a blank and a closing marker
cannot follow a blank. Note thereforce that stars and underscores inside
words are considered as valid marker for any end (however words containing
underscores usually belong to code spans anyway).

**Double** __emphasis__ and ***triple*** ___emphasis___ work similarly.
Note that in official Markdown specification, triple emphasis is merely simple
and double emphasis nested together, they are considered a separate entity
here to remove the ambiguity of nesting order.

HTML &#x65;ntities are part of Markdown specification, so they have a
dedicated parser element so they can be handled correctly by non-HTML
renderers.

Similarly, inline <abbr title="HyperText Markup Language">HTML</abbr> tags
are recognized and given as-is to the renderer. Note also that no correctness
or balancing test is perfomed.

Backslashes (`\`) quote the following character, so that litteral \` backticks
or \* stars can be inserted in a text.

# Hypertext links

Technically, inline images are a special kind of hypertext link, that follow
the same syntax after an exclamation mark (`!`).

The text of a link and the alt-text of an image are marked by brackets
(`[` … `]`), and the linked URL or image URL follow in any of the ways
described blow.

Inline links provide the URL directly between parentheses (`(` … `)`):
[text link](http://example.com/)

Reference links use a reference between brackets (`[` … `]`) and a separate
element specifies the URL for each reference.
[text link][ref1]

[ref1]: http://example.com/

Note that references are case insensistive (though currenly only ASCII
case-folding is implemented), so [this also links to ref1][REF1]. Similarly
white sequences are folded too, so [this links to `text link`][  TEXT
  LINK  ].

Short-cut links are like an empty reference, and use the link/alt text as a
reference:  [text link][]

[text link]: http://example.com/

Also any time a URL is provided, it can also be followed by an optional
title, between simple quotes (`'`) or double quotes (`"`):
[text link](http://example.com/ "title text").

![alt text](http://example.com/image.png "title text")

Moreover, an URL can be enclosed in angle brackets (`<` … `>`) like
[in this reference][ref2] or [inline](<http://example.com/>).

[ref2]: <http://example.com/>

The title in a reference entry can be on the next line with an indentation,
[like in this reference][ref3].

[ref3]: http://example.com/
	"title text"

Autolinks are a URL inserted directly into the text, surrounded by
angle bracks (`<` … `>`), like <http://example.com>.

# Extensions

## Inspired from PHP-Markdown-Extra

The following few extensions from [PHP-Markdown-Extra]
(http://michelf.ca/projects/php-markdown/extra/) are available,
mainly to allow complete Discount support (see below):

* Definition lists, with single-line unindented terms and
colon-prefixed (`:`) definitions:

    term1

    :   First definition.

        Second pragraph of first definition.

    term2
    alternate term2
    :   Second definition.

* Tables, using pipe signs (`|`) as column separators, and a line
containing only pipe signs, dashes (`-`) and blanks as header, either as
first line (for headerless tables) or as second line. Leading and trailing
pipe signs are optional, but to be considered as a table each line of the
block must have at least one pipe sign.

    To include a litteral pipe sign inside a cell, preceed it with a
backslash (`\`), even when there should be no need for an escape (e.g.
because it is inside a code span).

    Optionnally the pipe sign can be immediately preceeded or followed by
a colon (`:`) to indicate alignment of adjacent cells. A colon on the
left side means left-aligned, on the right side for right-aligned and on
both sides for centered. Specifying an alignment in the dash-only line sets
alignment for the whole column.

| First Header  | Second Header | Centered column |
| ------------- | ------------- |: ---------------------- :|
| Content Cell  | Content Cell  | Cell with a pipe (`\|`)  |
| Content Cell  | Content Cell  | Right-aligned override  :|



## Inspired from Discount

Almost all extensions supported by [Discount](http://www.pell.portland.or.us/~orc/Code/discount/) are supported:

* -> Centered paragraph, between arrows (`->` … `<-`). <-

* Images with size specification, by adding at the end of the title text both
numbers, separated by a lower-case X character (`x`) and following an equal
sign (`=`), without any blank.

    ![alt text of image with explicit size]
    (http://example.com/image.png "title text =150x100")

* Definition lists, with terms on a single line, between equal signs (`=`)
and definitions as indented lines:

    =term1=
        First definition.

        Second paragraph of first definition.

    =term2=
    =alternate term2=
        Second definition

* Pseudoprotocol links: when a special string is used as scheme in the
link URL, the element is rendered differently:

    * `abbr:`_description_ for abbreviations
      like [CSS](abbr:Cascading Style Sheets),
    * `class:`_name_ for [span tags](class:css-style) with the given class(es),
    * `id:`_name_ for an [anchor](id:id-pseudoprotocol) with the given id,
    * `raw:`_text_ for [](raw:unprocessed) text insertion.

*   > %css-style%
    > Class blocks, that look like quote blocks whose first line
    is a list of CSS classes between percent signs (`%`).

* Fenced code block, with nothing but at least 4 occurrences of a single
fence character (backtick (`` ` ``) or tilde (`~`)) on the first line and
the last line of the code block.

    At least as many fence characters must be used for closing as for
opening the code block, to allow escaping lines containing only the fencing
charater

    ~~~~~~

    This is a code block opened by 6 tildes.
    ~~~~~
    The line above is inside the code block, but not the line below.

    ~~~~~~~

## Invented here and in `libsoldout`

The following extensions are coming from my previous markdown library,
`libsoldout`.

* --Deleted-- text, delimited by emphasis-like pairs of `--`.

* ++Inserted++ text, delimited by emphasis-like pairs of `++`.

* |Plain `span`|, delimited by emphasis-like pairs of `|`.
